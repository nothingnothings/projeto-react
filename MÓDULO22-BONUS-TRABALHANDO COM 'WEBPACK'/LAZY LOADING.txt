 


 NA ÚLTIMA LIÇÃO,

 TERMINAMOS 

 NOSSO 

 'RULE SETUP' do webpack.config.js;
  


  FIZEMOS 

  O 


  ADD 

  DE UM 

  RULE 

  PARA 
  IMAGES,

  E OUTRO PARA CSS (mais complexo)...




  ------------------------




  AGORA O PROFESSOR QUER VER PLUGINS,

  E TAMBÉM QUER 

  VER 

  SE 
  ESSE SETUP ATUAL __ REALMENTE _ FUNCIONA__...











  -> AGORA, ACERCA DE PLUGINS,


  É ACTUALLY SUPER SIMPLES PARA NÓS, SUA UTILIZAÇÃO...













  ---> O USO DE PLUGINS NO 'DEVELOPMENT WORKFLOW' 


  é 


  __INÚTIL__... ----> NÓS VAMOS ADICIONAR UM DELES, UM PLUGIN,


  MAIS 

  __TARDE__, QUANDO SETTARMOS NOSSO PROJETO 

  PARA 

  'PRODUCTION'...









  ----------> LÁ NO MÓDULO DE PRODUCTION, PROFESSOR VAI QUERER ADICIONAR UM PLUGIN,

  MAS AGORA ELE NÃO QUER....









  --> DEVEMOS RODAR 'npm start',

  que 

  agora 

  está configurado PARA RODAR NOSSO DEV SERVER AUTOMATICAMENTE...


  ---------------------


  rodamos 

  npm start,

  e testamos se isso funciona 


  (deu um erro...)








  ex:



  NO TERMINAL...



link do fórum:



https://github.com/webpack/webpack-dev-server/issues/2759



'''''''''''''''''''''

Yes webpack-cli v4 comes with out of box support of @webpack-cli/serve which means you can use webpack serve to invoke the webpack-dev-server.


'''''''''''''''''''''''''''







CERTO.



AGORA O DEV SERVER ESTÁ 


_________FUNCIONANDO______.




-------------------------------------



NA 

VERDADE,

NÃO ESTÁ FUNCIONANDO (pq 

o professor colocou algumas configs loucas...



ex:

Error: Compiling RuleSet failed: Query arguments on 'loader' has been removed in favor of the 'options' property (at ruleSet[1].rules[2].loader: url-loader?limit=8000&name=images/[name].[ext])




---------------------------------------------------




FIZ ESTA ALTERAÇÃO:


          {
                test: /\.(png|jpe?g|gif)$/,
                // loader: 'url-loader?limit=8000&name=images/[name].[ext]'
                loader: 'url-loader',  
                options: {  //////// É A MESMA COISA QUE A VERSÃO DO QUERYPARAM, MAS MAIS MODERNA (a de antes, do professor, estava dando erro)...
                    limit: 8000,
                    name: 'images/[name].[ext]'
                }
          }


-------------------------




OBS:

RECEBI OUTRO ERRO:



ERROR in ./src/index.js
Module build failed (from ./node_modules/babel-loader/lib/index.js):
Error: Plugin/Preset files are not allowed to export objects, only functions. In C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\babel-preset-react\lib\index.js
    at createDescriptor (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\@babel\core\lib\config\config-descriptors.js:211:11)
    at createDescriptor.next (<anonymous>)
    at step (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:261:32)
    at evaluateAsync (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:291:5)
    at C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:44:11
    at Array.forEach (<anonymous>)
    at Function.async (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:43:15)
    at Function.all (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:216:13)
    at Generator.next (<anonymous>)
    at createDescriptors (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\@babel\core\lib\config\config-descriptors.js:142:41)




----------------------------------





OK, 


MAS 

CONTINUANDO 


A 


AULA DO PROFESSOR...  --> ele nos diz que 

NÃO PRECISAMOS 


DE NENHUM PLUGIN 



NO 'DEVELOPMENT BUILD WORKFLOW',

e que 


só vamos 


precisar deles quando 



estarmos 


'BUILDING FOR PRODUCTION'... (webpack.config.prod.js)...




------------------------------------------------




---------> SALVAMOS O ARQUIVO E TESTAMOS 



NOSSO 

DEV SERVER COM 

'webpack serve'...





--------> O PROFESSOR RECEBE UM ERRO: 


' 

"" is not an absolute path 


' --------> ISSO SIGNIFICA QUE 

ELE ERROU 

O VALOR 


DE 

'path' 

e 

'publicPath', 

ELE __INVERTEU OS 2 no output...



-----------------------------------------------------








O SERVIDOR RODOU,

MAS 

AGORA 



ELE 
NÃO 

ENTENDEU
 
  A SINTAXE 

  DE 
  IMPORT 

  DE 

  'AsyncPizza' (na versão do professor)...






OK, MAS 

COMO PODEMOS 

FAZER 
ELE 

entender


ESSE


DYNAMIC IMPORT AÍ? ------> então como fazemos isso, como 

fazemos 

ele entender 

O 
dynamic import? -----> PRECISAMOS 

CONFIGURAR 

NOSSO 


WEBPACK.CONFIG.JS 

PARA 

__QUE __ ELE CONSIGA __ GERAR 




'DYNAMICALLY GENERATED EXTRA CHUNKS OF CODE'... (pq o lazy loading é 

ALGO ___ EXTRA__, É UM PLUS; é algo que FAZ UM EXTRA BUNDLE SER CRIADO,
E NUNCA 

EXISTE EM UM PROJETO 'OUT OF THE BOX'...)




(eu não me lembro de como fazer isso, mas já fiz uma vez, em um projeto passado...)









--> PARA SUPPORTAR CODE SPLITTING (lazy loading) 


NO 

WEBPACK,



PROFESSOR 

TEM QUE 

ADICIONAR 





'chunkFilename',

essa propriedade 



ESPECIAL,

DENTRO 


DA PROPRIEDADE 



'output' 


NO MODULE.EXPORTS 


do 

'webpack.config.js'....



ex:






 module.exports = {
    entry: './src/index.js',
    devtool: 'eval-cheap-module-source-map',
    mode: 'development',
    output: {
        publicPath: '',
        filename: 'bundle.js',
        path: path.resolve(__dirname, 'dist'),
        chunkFileName:  /////////EIS O NOME EM QUESTão.
    },




 }

 

 ----------------------------



 ESSA PROPRIEDADE E SEU VALOR SIMPLESMENTE 

 DETERMINAM




__O QUE ___ AS FILES 'EXTRAS', CARREGADAS/EXISTENTES POR MEIO DO LAZY LOADING,

DEVERÃO 

SE CHAMAR 

('what they should be named')...


-------> PROFESSOR NOS EXPLICA QUE 

___ELAS __ DEVEM TER UMA PARTE 'VARIÁVEL' EM SEU NOME,



PQ ELAS 

SÃO GERADAS PELO WEBPACK DINAMICAMENTE....  ---> o professor vai 

usar 

um 

nome comum,


'id'
 

 '[id]' -----> É UM ID, UM NÚMERO ALEATÓRIO, DE 0 A 9,

 GERADO 

 PELO 

 WEBPACK, E QUE 

 É 

 COLOCADO NO FILENAME...



 ex:



 chunkFilename: '[id].js'




 -----------------------------------




 ISSO FARÁ COM QUE 

 'FEATURES OUTSOURCEADAS EM SEUS BUNDLES PRÓPRIOS' 

 __RECEBAM___ SEUS PRÓPRIOS ARQUIVOS JAVASCRIPT...






 CERTO...

 FICOU ASSIM:



  module.exports = {
    entry: './src/index.js',
    devtool: 'eval-cheap-module-source-map',
    mode: 'development',
    output: {
        publicPath: '',
        filename: 'bundle.js',
        path: path.resolve(__dirname, 'dist'),
        chunkFilename: '[id].js' ///////USADO NO 'LAZY LOADING'. (você precisa disso para CONSEGUIR NOMEAR OS ARQUIVOS/BUNDLES EXTRAS QUE SÃO CRIADOS QUANDO VOcÊ SETTA SEU REACT APP COMO 'LAZY LOADInG'...)
    },
    resolve: {
        extensions: ['.js', '.jsx'] /////serve para ___FAZER COM QUE O WEBPACK FUNCIONE COM SINTAXE DE IMPORTS ASSIM: 'import BuildControls from './BuildControls', QUE ENTÃO SÃO LIDAS COMO 'Import BuildControls from './BuildCOntrols.js' (OU SEJA, É ADICIONADO O '.js' e '.jsx' AO FINAL DO ARQUIVO AUTOMATICAMENTE, QUANDO NÃO SÃO ENCONTRADAS EXTENSÕES (.js, .jsx) em SUA SINTAXE DE IMPORT...)
    },





-------------------------------------






ADICIONALMENTE,


PRECISAMOS FAZER COM QUE 

O 

'BABEL' FIQUE 

'AWARE' 


DE NOSSO 
USO 

DE 

LAZY LOADING (acho que é por isso que 

estou recebendo este erro aqui:



ERROR in ./src/index.js
Module build failed (from ./node_modules/babel-loader/lib/index.js):
Error: Plugin/Preset files are not allowed to export objects, only functions. In C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\babel-preset-react\lib\index.js
    at createDescriptor (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\@babel\core\lib\config\config-descriptors.js:211:11)
    at createDescriptor.next (<anonymous>)
    at step (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:261:32)
    at evaluateAsync (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:291:5)
    at C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:44:11
    at Array.forEach (<anonymous>)
    at Function.async (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:43:15)
    at Function.all (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:216:13)
    at Generator.next (<anonymous>)
    at createDescriptors (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\@babel\core\lib\config\config-descriptors.js:142:41)



)






-----------> O BABEL __NÃO ENTENDE__ A SINTAXE __ DE 'LAZY LOADING' 

DO 

REACT __ SE VOCÊ NÃO O COMUNICAR DISSO___... ---> ok, e como comunicamos 



o 

babel,

como o informamos de que 



VAMOS QUERER


USAR 

O LAZY 

LOADING 



COM O WEBPACK, E COM NOSSO APLICATIVO REACT? -----> PARA ISSO,

PROFESSOR 




DIZ QUE 

DEVEMOS 

INSTALAR 

UMA PACKAGE 



BEM 

ABSURDA,

NOME 

GIGANTE,

CHAMDAA 



DE 


'babel-plugin-syntax-dynamic-import'








VAMOS TER QUE RODAR NO TERMINAL:



'npm install --save-dev babel-plugin-syntax-dynamic-import'.....




-----------------------------------




E 

É 

ISSO QUE 
VAI 



GARANTIR QUE 

O 

BABEL 
ENTENDA NOSSA 

SINTAXE DE LAZY LOADING, modular...


------------------------------------




MAS 



É 


EVIDENTE QUE, MESMO INSTALADA ESSA PACKAGE,


SUA 'COMUNICAÇÃO' AO BABEL NÃO SERÁ FEITA DE FORMA AUTOMÁTICA.... --> precisamos 

ir 


até 

o 

arquivo

'.babelrc'
 

 E ENTÃO 



IR NO OBJETO JSOn..... ---> vamos 


adicionar 



MAIS UM 'NODE'/PROPRIEDADE 

ALI,


DESSA 

VEZ CHAMADA 

DE 

"plugins",


E ALI 



DENTRO (dentro do array)

VAMOS 

COLOCAR 



A STRING 

DE 

"syntax-dynamic-import'...




EX:







{
    "presets": [
        ["env", {
            "targets": {
                "browsers": [
                    "> 1%",  //ver aula 'introduzindo babel'
                    "last 2 versions"
                ]
            }
        }]
        ,
        "react"
    ],
    "plugins": [
        "syntax-dynamic-import" /////////EIS O CÓDIGO EM QUESTÃO.
    ]
}






-------------------------






E NÓS AINDA RECEBEMOS AQUELE ERRO....


ex:





ERROR in ./src/index.js
Module build failed (from ./node_modules/babel-loader/lib/index.js):
Error: Plugin/Preset files are not allowed to export objects, only functions. In C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\babel-preset-react\lib\index.js
    at createDescriptor (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\@babel\core\lib\config\config-descriptors.js:211:11)
    at createDescriptor.next (<anonymous>)
    at step (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:261:32)
    at evaluateAsync (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:291:5)
    at C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:44:11
    at Array.forEach (<anonymous>)
    at Function.async (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:43:15)
    at Function.all (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:216:13)
    at Generator.next (<anonymous>)
    at createDescriptors (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\@babel\core\lib\config\config-descriptors.js:142:41)





----------------------------------------------









---> npm start.... ---> O NEGÓCIO COMPILA,


MAS 

NÓS 

RECEBEMOS 

UM ERRO 

DIFERENTE... ----> o erro 

está 

em 


''''''''''

state = {
      ^
}

'''''''''''



----------------------




ESSA 

SINTAXE 

NÃO É APRECIADA... ------> A RAZÃO PARA ISSO 

É 





O PRESET 

DE 



"env" que 

ESTAMOS 

USANDO 

LÁ 

EM 

'.babelrc'... ---------> ESSE PRESET 

__AÍ ___ SÓ 




___ SUPORTA_ _ 'LATEST BROWSER FEATURES' que fazem 

PARTE 

DA 

'''ESPECIFICAÇÃO'''__.... ('specification')... -------> 



E 

ESSA 


SINTAXE ESPECIAL DE 'PROPRIEDADES' (usada em 'state = {}')
 



____AINDA ESTÁ NO 

'DRAFT STATE',




E NÃO 

ESTÁ INCLUÍDO 




NO 

PRESET 

DE 

'env'... --------> MAS ISSO NÃO É UM PROBLEMA,


NÓS 


SÓ TEMOS 

QUE 

ADICIONAR 



__MAIS 1 PRESET___,



por meio de npm install... ---> 


vmaos 



instlar 





'babel-preset-stage-2' -------------> 






STAGE 2 PRESETS SÃO SIMPLESMENTE 'draft features',

SÃO 

FEATURES QUE EVENTUALMENTE SERÃO SUPORTADAS PELOS BROWSERS NORMALMENTE,

MAS QUE 

QUEREMOS USAR AGORA, NESSE MESMO INSTANTE, NO DESENVOLVIMENTO 
DE NOSSO 

APP...



 
 rodamos 




 npm install --save-dev babel-preset-stage-2





 ------------------------------------------




 ISSO FEITO,

 PRECISAMOS 

 ADICIONAR 


 ESSE 

 'preset'

 L´


 NOS 

 PRESETS 


 DO 


'babel'....





ex:







TIPO ASSIM:




{
    "presets": [
        ["env", {
            "targets": {
                "browsers": [
                    "> 1%",  //ver aula 'introduzindo babel'
                    "last 2 versions"
                ]
            }
        }]
        ,
        "react",
        "stage-2" /////////EIS O CÓDIGO EM QUESTÃO.
    ],
    "plugins": [
        "syntax-dynamic-import"
    ]
}



-----------------------------------------------






E NÓS AINDA RECEBEMOS O TAL ERRO



de 



ERROR in ./src/index.js
Module build failed (from ./node_modules/babel-loader/lib/index.js):
Error: Plugin/Preset files are not allowed to export objects, only functions. In C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\babel-preset-react\lib\index.js
    at createDescriptor (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\@babel\core\lib\config\config-descriptors.js:211:11)
    at createDescriptor.next (<anonymous>)
    at step (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:261:32)
    at evaluateAsync (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:291:5)
    at C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:44:11
    at Array.forEach (<anonymous>)
    at Function.async (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:43:15)
    at Function.all (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\gensync\index.js:216:13)
    at Generator.next (<anonymous>)
    at createDescriptors (C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\node_modules\@babel\core\lib\config\config-descriptors.js:142:41)






-----------------------------------------------------------------------------------------------








MAS A VERSÃO DO PROFESSOR __FUNCIONOU__ ( só a nossa está dando erro...)










SOLUÇÃO:


https://github.com/babel/babel/issues/6808


Just like env is now @babel/env, react should be @babel/react and you'll need to install @babel/preset-react.




-----------------------------------------------




Error: [BABEL] C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\src\index.js:
As of v7.0.0-beta.55, we've removed Babel's Stage presets.
Please consider reading our blog post on this decision at
https://babeljs.io/blog/2018/07/27/removing-babels-stage-presets
for more details. TL;DR is that it's more beneficial in the
  long run to explicitly add which proposals to use.

For a more automatic migration, we have updated babel-upgrade,
https://github.com/babel/babel-upgrade to do this for you with
"npx babel-upgrade".

If you want the same configuration as before:



----------------------------------------

FIZ UM MONTE 

DE COISAS,

MAS AINDA 
ESTOU 


RECEBENDO 

DEZENAS 

DE ERROS...


ÚLTIMOS ERROS QUE RECEBI COM 


'WEBPACK SERVE':




ERROR in ./src/components/PizzaImage/PizzaImage.js 2:0-54
Module not found: Error: Can't resolve 'postcss-loader' in 'C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 
'WEBPACK''
 @ ./src/containers/Users.js 24:0-61
 @ ./src/App.js 26:0-39 54:19-24
 @ ./src/index.js 4:0-24 6:104-107

ERROR in ./src/hoc/AsyncComponent/AsyncComponent.js
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: C:\projeto2 - react\MÓDULO22-BONUS-TRABALHANDO COM 'WEBPACK'\src\hoc\AsyncComponent\AsyncComponent.js: Unexpected token (10:22)



  return class extends Component {
   9 |         state = {
> 10 |             component = null
     |                       ^
  11 |         }








  --------------------------------------



OK,



FINALMENTE 

CONSEGUI 

RESOLVER TODOS OS ERROS....



MAS 

O FORMATO DO CÓDIGO FICOU BEM DIFERENTE,


E VÁRIOS 

DOS PACOTES QUE O PROFESSOR 
ESTAVA 

USANDO 

ESTAVAM 



__dESATUALIZADOS___ --> 


atualizei 


muitos deles, que 

ficaram com 


um 
'@' no início de suas escritas... (versão mais recente de babel)...







EIS OS CÓDIGOS DELES:








CÓDIGO DE 'PACKAGE.JSON':





{
  "name": "modulo22",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "webpack-dev-server"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@babel/core": "^7.14.8", ////mudança
    "@babel/plugin-syntax-dynamic-import": "^7.8.3", ////mudança
    "@babel/preset-env": "^7.14.8", ////mudança
    "@babel/preset-react": "^7.14.5", ////mudança
    "@webpack-cli/serve": "^1.5.1",  ////mudança
    "autoprefixer": "^10.3.1",
    "babel-loader": "^8.2.2",
    "css-loader": "^6.2.0",
    "file-loader": "^6.2.0",
    "postcss": "^8.3.6",
    "postcss-loader": "^6.1.1",
    "style-loader": "^3.2.1",
    "url-loader": "^4.1.1",
    "webpack": "^5.46.0",
    "webpack-cli": "^4.7.2",
    "webpack-dev-server": "^3.11.2"
  },
  "dependencies": {
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-router-dom": "^5.2.0"
  }
}


---------------------------------------------






TAMBÉM 

EM 



'.babelrc':



{
    "presets": [
        ["@babel/preset-env", {
            "targets": {
                "browsers": [
                    "> 1%",  //ver aula 'introduzindo babel'
                    "last 2 versions"
                ]
            }
        }]
        ,
        "@babel/preset-react"
        // "@babel/preset-stage-2" ///DEPRECADO...
    ],
    "plugins": [
        "@babel/plugin-syntax-dynamic-import" ////alterado.
    ]
}







-------------------------





JÁ O CÓDIGO 


DE 



'webpack.config.js' 

FOI SEVERAMENTE (e eu ainda NÃO SEI COMO FAZER O 'AUTOPREFIXER' FUNCIONAR dentro do 'postcss-loader'... --> tenho que ver como fazer isso...)

ALTERADO___:




 module.exports = {
    entry: './src/index.js',
    devtool: 'eval-cheap-module-source-map',
    mode: 'development',
    output: {
        publicPath: '',
        filename: 'bundle.js',
        path: path.resolve(__dirname, 'dist'),
        chunkFilename: '[id].js' ///////USADO NO 'LAZY LOADING'. (você precisa disso para CONSEGUIR NOMEAR OS ARQUIVOS/BUNDLES EXTRAS QUE SÃO CRIADOS QUANDO VOcÊ SETTA SEU REACT APP COMO 'LAZY LOADInG'...)
    },
    resolve: {
        extensions: ['.js', '.jsx'] /////serve para ___FAZER COM QUE O WEBPACK FUNCIONE COM SINTAXE DE IMPORTS ASSIM: 'import BuildControls from './BuildControls', QUE ENTÃO SÃO LIDAS COMO 'Import BuildControls from './BuildCOntrols.js' (OU SEJA, É ADICIONADO O '.js' e '.jsx' AO FINAL DO ARQUIVO AUTOMATICAMENTE, QUANDO NÃO SÃO ENCONTRADAS EXTENSÕES (.js, .jsx) em SUA SINTAXE DE IMPORT...)
    },

    module: {
        rules: [
            {
                test: /\.js$/,
                loader: 'babel-loader',
                exclude: /node_modules/
            },
            {
                test: /\.css$/,
                exclude: /node_modules/,
                // loader: 'css-loader' /// ESSA SINTAXE É MUITO SIMPLES PARA FAZER COM QUE O IMPORT DE CSS FUNCIONE COM O WEBPACK... -> devemos usar essa sintaxe mais abaixo, de 'use'...
                use: [
                    { loader: 'style-loader'},
                    { loader: require.resolve('css-loader'),  ///este código é PARSEADO E ANALISADO __ DE BAIXO __ PARA CIMA___...( orientação inversa....) --> e, SIM, A ORDEM IMPORTA, NESSE 'use'...
                       options: {
                           importLoaders: 1, ///idiossincrasia do 'CSS-LOADER'... --> só ele precisa dessa propriedade. Essa propriedade informa A ELE QUANTOS LOADERS VAO SER EXECUTADOS ANTES DELE, DURANTE O RUNTIME... --> no caso, digitamos '1', pq apenas o 'postcss-loader' VAI SER EXECUTADO ANTES DELE...
                           modules: true,
                        //    localIdentName: '[name]_[local]_[hash:base64:5]'
                       }  },
                    { loader: 'postcss-loader'
                // options: {
                //     ident: 'postcss',

                //     // plugins: () => [              /////////// O ___AUTOPREFIXER__ 
                //     //     autoprefixer({
                //     //         browsers: [
                //     //             "> 1%",
                //     //             "last 2 versions"
                //     //         ]
                //     //     })
                //     // ]
                // }
            }
                ]
            },
            {
                test: /\.(png|jpe?g|gif)$/,
                // loader: 'url-loader?limit=8000&name=images/[name].[ext]'
                loader: 'url-loader',
                options: {
                    limit: 8000,
                    name: 'images/[name].[ext]'
                }
            }
        ]
    }
}






-----------------------







OK, CONSEGUI ADICIONAR O 'PREFIXER' no meu webpack dev build workflow... --> 








USEI 

UM ARQUIVO DE 

'postcss.config.js',

QUE 

É AUTOMATICAMENTE 

ANALISADO 
PELO 

LOADER 

DE 

'postcss-loader' quando 
ele é executado (e dentro desse 'postcss.config.js' EU DEFINI 

MEU PLUGIN 

DE 

'autoprofiler', que então é executado...)









-------------------------------------------------






OK... A ÚLTIMA COISA QUE O PROFESSOR HAVIA COMENTADO 



É QUE 

NOSSO 


APP 


ESTÁ 

SENDO EXECUTADO 

EM 

'localhost:8080'... --> 

e isso 


não está certo... ---> não está certo pq __NÃO VAMOS ENXERGAR NOSSO APP; O QUE 

VEREMOS 

É 

APENAS 

UM 

'FILE SYSTEm',




E A RAZÃO DE ISSO TER ACONTECIDO É SIMPLES:


NÓS 

__NÃO CONECTAMOS 


NOSSO 
'BUILD OUTPUT',

QUE, 


BTW,






_NÃO É ARMAZENADO ___ EM 'DIST' QUANDO 

RODAMOS 


O 

'WEBPACK-DEV-SERVER',

E SIM 
É 

ARMAZENADO 
'IN MEMORY'...  ---------> 





NÓS BASICAMENTE NÃO CONECTAMOS 


NOSSO 'OUTPUT'



do 


WEBPACK COM NOSSO ARQUIVO INDEX.HTML... ------> OU SEJA,


NÃO 

TEMOS NENHUM 


IMPORT NAQUELE 

ARQUIVO 


DE 

'index.html',

o que 




faz com que 

NÃO TENHAMOS NENHUM CONTEÚDO,

POIS 

NADA 

DE CÓDIGO JAVASCRIPT 

É CARREGADO NESSE INDEX HTML,



E É O CÓDIGO JAVASCRIPT QUE FAZ O RENDER DO CONTEÚDO...





---------> OK, MAS COMO PODEMOS ADICIONAR O SCRIPT/BUILD DO 


WEBPACK

NESSE ARQUIVO HTML? --> DEVEMOS VER ISSO NA PRÓXIMA AULA...