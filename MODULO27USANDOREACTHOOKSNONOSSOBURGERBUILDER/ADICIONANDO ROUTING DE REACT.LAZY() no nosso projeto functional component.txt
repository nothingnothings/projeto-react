







-->  no 


nosso 


arquivo 


do 

reducer,

lá 



no 


'/store',





professor diz que 

não temos que fazer 

coisa alguma ---> 



não está propriamente relacionado ao routing,

e por isso 



podemos 


deixar
 
 tudo isso como está.... -------->  







 o folder de 'shared' tem 


 nosso arquivo 

 utility.js,


 q 

 tbm fica como está












--> no 



folder de 

hoc 



temos 


4 


components.... ----> 







o 


'asyncComponent',



usado 

só para LAZY LOADING QUANDO ROUTAMOS,



é 



,


actually,




já um 

functional component... ----> 


MAS 



ELE 


RETORNA 

UM 

FUNCTIONAL 


COMPONENT --------> 


professor diz que 


poderíamos 

converter 


o 

return 

do 


class-based 

component 

interno 

em um functional component,

mas que isso é desnecessário (esforço inútil)...



ex:






import React, { Component } from 'react';

const asyncComponent = (importComponent) => {
  return class extends Component {
    state = {
      component: null,
    };

    componentDidMount() {
      importComponent().then((component) => {
        this.setState({
          component: component.default,
        });
      });
    }

    render() {
      const C = this.state.component;
      return C ? <C {...this.props} /> : null;
    }
  };
};

export default asyncComponent;





--------------------------------------------




--> EM VEZ DISSO,




PODEMOS 


DELETAR
 

 TODO 

 ESSE FOLDER 

 DE 

 'AsyncComponent'



 PARA 


 ENTÃO __USAR __  O REACT.LAZY()....







--> VAMOS FAZER ISSO EM 

'App.js'... 












-----> o 




REACT.LAZY É UMA 

'NATIVE REACT FEATURE'... (builtin) --->  





EM VEZ DE USAR 


'asyncComponent()'


várias 

vezes 


ao longo de 


'App.js',

para construir 


nossas 

routes 


de forma lazy...





--> PARA ESTRUTURAR isso de forma 'react.lazy()'... ---> 







EX (versão antiga):






 const AsyncOrders = asyncComponent(() => {
   return import('../src/containers/Orders/Orders');
 });

 const AsyncAuth = asyncComponent(() => {
   return import('../src/containers/Auth/Auth');
 });

 const AsyncCheckout = asyncComponent(() => {
   return import('../src/containers/Checkout/Checkout');
 });








 EX(versão nova):







 
 const AsyncOrders = React.lazy(() => {
   return import('../src/containers/Orders/Orders');
 });

 const AsyncAuth = React.lazy(() => {
   return import('../src/containers/Auth/Auth');
 });

 const AsyncCheckout = React.lazy(() => {
   return import('../src/containers/Checkout/Checkout');
 });





------------------------------






ISSO, O REACT LAZY,

ELE 

FAZ 


ESSENCIALMENTE 

O QUE 

FAZÍAMOS 

ANTES ( com asyncComponent()),


mas 


dessa 

vez 


escrevendo 

'React.lazy()'....



(mudanças introduzidas com 16.8)




--->  MAS PARA 

O 

REACT.LAZY()



FUNCIONAR,


PRECISAMOS 




IMPORTAR 

UM OBJETO 

ESPECIAL
 

 do 

 'react', 



o 


objeto/função 


'Suspense'... (ISSO LÁ NO 'App.js'...)



ex:




import { Suspense } from 'react';






-------------------------------------









--> DEVEMOS  WRAPPAR O LUGAR EM QUE 

QUEREMOS 

USAR 

ESSES 

'LAZY COMPONENTS'...


 


Para isso, 

professor 

vai renomear os 'Async' 

de acordo com sua função...



ex:






 
 const Orders = React.lazy(() => {
   return import('../src/containers/Orders/Orders');
 });

 const Auth = React.lazy(() => {
   return import('../src/containers/Auth/Auth');
 });

 const Checkout = React.lazy(() => {
   return import('../src/containers/Checkout/Checkout');
 });






 ----------------------------------------






 --> PROFESSOR RENOMEOU ESSES NEGÓCIOS ASSIM PQ 

 PRETENDE 

 OS 

 UTILIZAR 
 COMO 

 ELEMENTOS 

 JSX... ----> 








 ISSO FEITO,

 DEVEMOS 

 OBSERVAR NOSSO CÓDIGO DAS ROUTES:









 const App = (props) => {
  // componentDidMount() {
  //   this.props.onTryAutoSignIn();
  // }


    useEffect(() => {
            props.onTryAutoSignIn();
        


    }, []);


  let routes = (
    <Switch>
      <Route path="/auth" component={AsyncAuth} />
      <Route path="/" exact component={BurgerBuilder} />
      <Redirect to="/" />
    </Switch>
  );

  if (props.token) {
    routes = (
      <Switch>
        <Route path="/checkout" component={AsyncCheckout} />
        <Route path="/orders" component={AsyncOrders} />
        <Route path="/auth" component={AsyncAuth} />
        <Route path="/logout" component={Logout} />
        <Route path="/" exact component={BurgerBuilder} />
        <Redirect to="/" />
      </Switch>
    );
  }

  return (
    <BrowserRouter>
      <div>
        <Layout>{routes}</Layout> ////////ESTE CÓDIGO AQUI.
      </div>
    </BrowserRouter>
  );
};



-----------------------------------------------







  return (
    <BrowserRouter>
      <div>
        <Layout>{routes}</Layout> ////////ESTE CÓDIGO AQUI.
      </div>
    </BrowserRouter>
  ); 



--------> esse component/representação de 


'routes' 


deve ser



WRAPPADO __ POR 

'Suspense',

esse objeto que 


recém
 
 importamos...




---------------------------






EX:








  return (
    <BrowserRouter>
      <div>
        <Layout><Suspense>{routes}</Suspense></Layout> ////////ESTE CÓDIGO AQUI.
      </div>
    </BrowserRouter>
  ); 


-----------------------------------------------







Certo.... ----> mas o 



Component 

'Suspense'



ACEITA/EXIGE 

UMA 

PROPRIEDADE/PROP 


de 

fallback,






___ESSA PROPRIEDADE__ DEFINE O QUE __ DEVERÁ SER RENDERIZADO __ ENQUANTO 

ESPERAMOS

PELO 

RENDER 
DESSES 

LAZY COMPONENTS 

QUE 
FORAM 

WRAPPADOS POR ELE...



ex:







  return (
    <BrowserRouter>
      <div>
        <Layout><Suspense fallback={}>{routes}</Suspense></Layout> ////////ESTE CÓDIGO AQUI.
      </div>
    </BrowserRouter>
  ); 



------------------------------






--> Dentro desse propriedade/prop de 



'fallback',


vamos 



escrever um <p> de 'Loading...'



Ex:







  return (
    <BrowserRouter>
      <div>
        <Layout><Suspense fallback={<p>Loading...</p>}>{routes}</Suspense></Layout> ////////ESTE CÓDIGO AQUI.
      </div>
    </BrowserRouter>
  ); 




--------------------------------






NO LUGAR 

DESSA 

MENSAGEM 

DE 
'LOADING',


podemos 

colocar 

qualquer coisa,

como 
por exemplo um 

SPINNER... (nosso component 'Spinner'...)




EX:


import Spinner from './components/UI/Spinner/Spinner';

  return (
    <BrowserRouter>
      <div>
        <Layout><Suspense fallback={Spinner}>{routes}</Suspense></Layout> ////////ESTE CÓDIGO AQUI.
      </div>
    </BrowserRouter>
  ); 




------------------------------------------------






-> ISSO FEITO,

PODEMOS 

USAR 


NOSSOS 

'LAZILY LOADED COMPONENTS'  nas 

routes.... ---> 


PARA 
ISSO,


VAMOS 


SUBSTITUIR 


ESTES CÓDIGOS AQUI:





    <Switch>
      <Route path="/auth" component={AsyncAuth} /> /////ESTE CÓDIGO AQUI DEVERÁ SER SUBSTITUÍDO...
      <Route path="/" exact component={BurgerBuilder} />
      <Redirect to="/" />
    </Switch>



------------------------

(não vamos usar mais 'component={}', e sim 'render={}'...  ----> RENDER 


com uma 

FUNÇÃO INTERNA PASSADA COMO PARÂMETRO... o return dessa função 

interna 

será 

o component 

assíncrono 
que 

desejamos.)



-------------------------------




FICARÁ ASSIM:




    <Route path="/auth" render={() => { return <Auth />}} /> 



---------------------------------




Certo... fiz essa troca.




(IMPORTANTE ----> DEPOIS O PROFESSOR VAI NOS MOSTRAR QUE FIZEMOS ALGO DE FORMA ERRADA AQUI.... 




--> faltou passar 'props' COMO __ARGUMENTO__ DESSA FUNÇÃO __ INTERNA,
 
 
 PARA ENTÃO 
 
 USAR AQUELA 
 
 GAMBIARRA 
 
 de 
 
 
'{...props}' DENTRO DESSE COMPONENT....)







TIPO ASSIM:





    <Route path="/auth" render={() => { return <Auth   {...props}/>}} /> 
                                                        ^^^^^^^^







-----------------



TIPO ASSIM:



  if (props.token) {                      ////obs: 'props' no slot de parâmetros é ALGO NECESSÁRIO, e aquele spread operator para distribuir os props no COMPONENT assíncrono __TAMBÉM É NECESSÁRIO___....
    routes = (
      <Switch>
        <Route path="/checkout" render={(props) => {return <Checkout {...props} />}} />
        <Route path="/orders" render={(props) => {return <Orders  {...props}/>}} />
        <Route path="/auth" render={(props) => {return <Auth  {...props}/>}} />
        <Route path="/logout" component={Logout} />
        <Route path="/" exact component={BurgerBuilder} />
        <Redirect to="/" />
      </Switch>
    );
  }


--------------------



Por meio desse formato,

fazemos 


UM FORWARD APROPRIADO
 
 DOS 

 NOSSOS 

 'ROUTING PROPS'...



-----------------------------------------------------




Certo... isso funcionou..






--> só há um problema no nosso site: 


quando 

recarregamos 

a página 

de 

'Orders',


somos AUTOMATICAMENTE REDIRECIONADOS 



À HOME PAGE...




--> CONSERTEI.


Era este o problema:







  let routes = (
    <Switch>
      <Route path="/auth" render={() => {return <Auth />}} />
      <Route path="/" exact component={BurgerBuilder} />
       <Redirect to="/" /> /////ESTE ERA O PROBLEMA....
    </Switch>
  );








FICOU ASSIM:







  let routes = (
    <Switch>
      <Route path="/auth" render={() => {return <Auth />}} />
      <Route path="/" exact component={BurgerBuilder} />
      {/* <Redirect to="/" /> */}
    </Switch>
  );



--------------------------------------


