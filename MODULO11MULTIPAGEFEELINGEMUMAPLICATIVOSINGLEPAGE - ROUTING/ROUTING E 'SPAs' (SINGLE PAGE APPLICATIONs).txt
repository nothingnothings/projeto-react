

ROUTING ---> DEVE SER USADO QUANDO QUEREMOS __REALMENTE__ CONSTRUIR UMA SINGLE PAGE APPLICATION...






ROUTING IS 'ALL ABOUT' SER CAPAZ 


DE MOSTRAR 


DIFERENTES 

PÁGINAS AO USUÁRIO... ----> PQ A 


GRANDE 

MAIORIA 


DOS APPS OU SITES 

QUE 

VOCE CONHECE 



TÊM PROVAVELMENTE MAIS DE 1 PÁGINA --> 


EX, SITE TEM 


UMA PAGINA DE USUÁRIOS, UMA PAGINA DE INFORMACAO, ETC ETC...




------------------------------------------------




CLARO QUE VOCE PODE ESTAR SE PERGUNTANDO




PERA AI, MULTIPLAS PAGINAS EM 



UM 


SINGLE PAGE APPLICATION, COMO 



ISSO FUNCIONA 









----> BEM, A IDEIA POR TRAS DE UMA SINGLE PAGE APPLICATION, 


E TER UMA __UNICA PAGINA__, UM UNICO ___ARQUIVO HTML___  ---> AINDA 

ASSIM, QUEREMOS PROVIDENCIAR AO USUARIO UMA ''EXPERIENCIA WEB NORMAL'''.. --> 


OU SEJA, QUEREMOS MOSTRAR MULTIPLAS PAGINAS A ELE, MAS 

ISSO SEM SAIR 

DE NOSSO UNICO HTML... (nossa unica pagina). ------------>




VAMOS QUERER MOSTRAR 



___dIFERENTES ___ PAGINAS __ PARA DIFERENTES URLs nessa 



pagina unica, 


mas 


o 

TRUQUE 


é 

que
 
 NOS NAO TEREMOS 

 MULTIPLOS 



ARQUIVOS HTML (como um aplicativo javascript normal),



E SIM 

QUE 


FAREMOS OU USAREMOS O JAVASCRIPT 



PARA 


___rENDERIZAR___ DIFERENTES 


PAGINAS 


DEPENDENDO 


DOS PATHS 


ACESSADOS 


PELO USUARIO (em buttons e etc...).





---> OU SEJA, NAO TEREMOS ARQUIVOS HTML DIFERENTES, COM CÓDIGO JAVASCRIPT 

CONTIDOS 

DENTRO DELES,


E SIM 

QUE 

TEREMOS UMA 

PAGINA 

UNICA, COM UM 


JAVASCRIPT INTERATIVO QUE 

RENDERIZARA OU RE-RENDERIZARA PARTES 


DAQUELA
 


 SINGLE PAGE (OU A SINGLE PAGE INTEIRA, DEPENDENDO DO CASO) DEPENDENDO 


 DO 

 PATH QUE O USUARIO ACESSOU NO NOSSO APLICATIVO... --->  E ISSO QUE 


 E O ROUTING... -----------> É O PARSING __ DO PATH__ (parte depois do 'domain') 


 E ENTAO 



 MOSTRAR O CÓDIGO JSX (component ou components) APROPRIADO 


 PARA ESSE PATH...  -------------> PARA ISSO, 


 USAREMOS 


 UMA 

 'ROUTER PACKAGE'... ---------> USAREMOS ISSO 


 PARA ADICIONAR ESSA FUNCIONALIDADE,



 O 

 'ROUTER PACKAGE' 



 FAZ COM QUE NAO PRECISEMOS ADICIONAR 

 ESSE 'PARSING' 

 DOS 

 PATHs 

 por nossas proprias maos (pq esse processo 
 
 
 é 'non trivial')


 


 --> ESSA ROUTER PACKAGE 




 ____TEM UM MONTE DE INCUMBÊNCIAS___ >>>





 1) ESSA PACKAGE DEVERÁ, ANTES DE MAIS NADA, __PARSEAR__ a URL (path) ACESSADA PELO USUARIO...


 ELE DEVERA '''ENTENDER''' QUAL LUGAR O USUÁRIO QUERIA IR...




>>>>nos, como desenvolvedores, temos de estabelecer DIFERENTES 


'PATHS' no nosso aplicativo... --------> E SÓ 

OS 

PATHS 

CODADOS 

POR NÓS 

PODERÃO SER ACESSADOS PELO USUARIO...






 2) A PACKAGE 'ROUTER' VAI __bASICAMENTE ___ 'LER A NOSSA CONFIGURACAO (config)'
  


  PARA ENTAO SABER __QUAIS PATHS SAO SUPORTADOS__, E O QUE DEVERA 

  ACONTECER
   

   QUANDO O USUARIO VISITAR UM DESSES PATHS...






3) NA ETAPA FINAL, O ROUTER VAI __eNTÃO __ RENDERIZAR (cARREGAR) 

O CÓDIGO JSX(COMPONENTS) 

APROPRIADO 


PARA AQUELE PATH...









E ESSA A IDEIA POR TRAS DO ROUTING... ---> RENDERIZAR 

 

 CODIGO JSX CONDICIONALMENTE, SENDO A CONDICAO OS 

 ___dIFERENTES__ PATHs __ ACESSADOS PELO USUA´RIO NO NOSSO 


 APLICATIVO__...



 --------------------------------------------





 >>>> E NOS USAMOS A PACKAGE 'ROUTER' PARA QUE 


 NAO 



PRECISARMOS DETERMINAR QUAL PATH O USUÁRIO SE ENCONTRA 

NO PRESENTE, por conta propria...


----------------------------





AGORA VEREMOS AS FEATURES DO PACKAGE 'ROUTER', 

AS FEATURES 

QUE ELE SUPORTA,

E COMO PODEMOS 

O UTILIZAR NO 

NOSSO APLICATIVO 



PARA DESENVOLVER MULTIPLAS PAGINAS NO NOSSO 'SINGLE PAGE APP'...



